{"version":3,"sources":["components/AddItemForm/AddItemForm.module.scss","components/EditableSpan/EditableSpan.module.scss","serviceWorker.ts","components/AddItemForm/AddItemForm.tsx","api/api.ts","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","hooks/useActions.ts","state/auth/auth-actions.ts","state/auth/auth-slice.ts","state/app/app-actions.ts","state/app/app-slice.ts","utils/error-utils.ts","state/todolists/todolists-actions.ts","state/todolists/todolists-slice.ts","state/tasks/tasks-slice.ts","state/tasks/tasks-actions.ts","state/tasks/index.ts","components/Todolist/Todolist.tsx","state/tasks/tasks-selectors.ts","state/auth/auth-selectors.ts","state/auth/index.ts","state/todolists/todolists-selectors.ts","state/todolists/index.ts","pages/TodolistsListPage.tsx","pages/LoginPage.tsx","state/app/app-selectors.ts","state/app/index.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","layouts/HeaderLayout.tsx","app/App.tsx","state/store.ts","index.tsx","components/Todolist/Todolist.module.scss","components/Task/Task.module.scss"],"names":["module","exports","Boolean","window","location","hostname","match","AddItemForm","React","memo","_ref","addItem","disabled","className","console","log","_useState","useState","_useState2","_slicedToArray","inputValue","setInputValue","_useState3","_useState4","error","setError","useEffect","setTimeout","onClickAddItemHandler","trim","_jsxs","clsx","styles","input","children","_jsx","TextField","label","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","inputProps","maxLength","Button","onClick","button","Add","TaskStatus","instance","axios","create","baseURL","withCredentials","headers","Api","_classCallCheck","_createClass","_getTodolists","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","get","abrupt","sent","stop","apply","arguments","_createTodolist","_callee2","title","_context2","post","_x","_deleteTodolist","_callee3","todolistId","_context3","delete","concat","_x2","_updateTodolist","_callee4","_context4","put","_x3","_x4","_getTasks","_callee5","_context5","_x5","_createTask","_callee6","_context6","_x6","_x7","_updateTask","_callee7","taskId","updateData","_context7","_x8","_x9","_x10","_deleteTask","_callee8","_context8","_x11","_x12","_login","_callee9","email","password","rememberMe","captcha","_context9","_x13","_logout","_callee10","_context10","_authMe","_callee11","_context11","EditableSpan","changeItem","itemId","valueInput","setValueInput","editMode","setEditMode","wrapper","onBlur","multiline","textField","autoFocus","onDoubleClick","Task","task","changeCheckStatus","changeTaskTitle","removeTask","onChangeTitleTaskHandler","useCallback","newTitle","status","Completed","is_done","Checkbox","checked","New","id","entityStatus","IconButton","Delete","useActions","actions","dispatch","useDispatch","useMemo","bindActionCreators","loginTC","createAsyncThunk","authData","thunkAPI","_yield$Api$login","data","setLoadingStatus","login","resultCode","handleServerAppError","messages","rejectWithValue","t0","handleServerNetworkError","logoutTC","_ref2","_","_yield$Api$logout","logout","authSlice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","initializeAppTC","_yield$Api$authMe","authMe","appSlice","loadingStatus","initialized","build","appReducer","_appSlice$actions","length","Error","message","fetchTodolistsTC","_yield$Api$getTodolis","i","getTodolists","fetchTasksTC","todolists","removeTodolistTC","_ref4","_ref3","_yield$Api$deleteTodo","changeTodolistEntityStatus","deleteTodolist","addTodolistTC","_ref6","_ref5","_yield$Api$createTodo","createTodolist","todolist","item","changeTodolistTitleTC","_ref9","_ref7","_ref8","_yield$Api$updateTodo","updateTodolist","todolistsSlice","changeTodolistFilter","index","findIndex","td","filter","map","_objectSpread","unshift","todolistsReducer","_todolistsSlice$actio","tasksSlice","changeTaskEntityStatus","_step","_iterator","_createForOfIteratorHelper","s","n","done","err","f","forEach","tl","tasks","t","deleteTaskTC","splice","addTaskTC","taskState","updateTaskTC","tasksReducer","_yield$Api$getTasks","getTasks","items","deleteTask","_yield$Api$createTask","createTask","getState","tasksTodolist","find","updateTask","startDate","priority","description","deadline","completed","tasksActions","tasksAsyncActions","Todolist","_newTasks","changeFilter","removeTodolist","changeTodolistTitle","_useActions","useSelector","getTasksByTodolistId","addTask","newTasks","todolist_title","color","getAuthIsLoggedIn","auth","authActions","authAsyncActions","todolistsActions","todolistsAsyncActions","TodolistsListPage","todolistsSelectors","authSelectors","addTodolist","_Fragment","Container","fixed","Grid","container","spacing","Paper","Navigate","to","LoginPage","formik","useFormik","initialValues","checkbox","validationSchema","Yup","required","min","onSubmit","values","resetForm","justifyContent","preventDefault","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","type","margin","getFieldProps","touched","errors","style","FormControlLabel","control","getAppInitialized","app","getAppError","getAppLoadingStatus","appActions","appAsyncActions","Alert","forwardRef","props","ref","MuiAlert","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","HeaderLayout","AppBar","position","Toolbar","Typography","component","sx","flexGrow","Box","width","LinearProgress","Outlet","App","isInitialized","Routes","Route","path","element","display","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","Provider","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a017906c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"AddItemForm_input__3zzJw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"EditableSpan_wrapper__2EP2T\",\"textField\":\"EditableSpan_textField__2phs8\",\"title\":\"EditableSpan_title__4XzLW\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { DetailedHTMLProps, HTMLAttributes, useEffect, useState } from \"react\";\r\n\r\nimport styles from \"./AddItemForm.module.scss\";\r\nimport { Button, TextField } from \"@mui/material\";\r\nimport { Add } from \"@mui/icons-material\";\r\nimport clsx from \"clsx\";\r\n\r\ninterface AddItemFormPropsType\r\n    extends DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement> {\r\n    addItem: (title: string) => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(function ({\r\n    addItem,\r\n    disabled,\r\n    className,\r\n}) {\r\n    console.log(\"AddItemForm called\");\r\n\r\n    const [inputValue, setInputValue] = useState<string>(\"\");\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            setTimeout(() => {\r\n                setError(false);\r\n            }, 3000);\r\n        }\r\n    }, [error]);\r\n\r\n    const onClickAddItemHandler = () => {\r\n        if (inputValue.trim() !== \"\") {\r\n            addItem(inputValue.trim());\r\n            setInputValue(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    };\r\n\r\n    const onKeyPressAddTaskHandler = (key: string) => {\r\n        if (key === \"Enter\") {\r\n            onClickAddItemHandler();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={clsx(className, styles.input)}>\r\n            <TextField\r\n                label=\"Write some...\"\r\n                variant=\"outlined\"\r\n                value={inputValue}\r\n                onChange={(e) => setInputValue(e.currentTarget.value)}\r\n                onKeyPress={(e) => onKeyPressAddTaskHandler(e.key)}\r\n                error={error}\r\n                helperText={error && \"Field is required\"}\r\n                inputProps={{ maxLength: 30 }}\r\n                disabled={disabled}\r\n            />\r\n\r\n            <Button onClick={onClickAddItemHandler} className={styles.button} variant={\"contained\"}>\r\n                <Add />\r\n            </Button>\r\n        </div>\r\n    );\r\n});\r\n","import axios from \"axios\";\r\n\r\nexport type TodolistType = {\r\n    id: string;\r\n    addedDate: string;\r\n    order: number;\r\n    title: string;\r\n};\r\nexport type TodolistResponseType<D> = {\r\n    resultCode: number;\r\n    messages: string[];\r\n    fieldsErrors: string[];\r\n    data: D;\r\n};\r\ntype DeleteTodolistResponseType<D> = Omit<TodolistResponseType<D>, \"fieldsErrors\">;\r\n\r\nexport enum TaskStatus {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft,\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    High,\r\n    Urgently,\r\n    Later,\r\n}\r\nexport type TaskType = {\r\n    description: string | null;\r\n    title: string;\r\n    completed: boolean;\r\n    status: TaskStatus;\r\n    priority: TaskPriorities;\r\n    startDate: string | null;\r\n    deadline: string | null;\r\n    id: string;\r\n    todoListId: string;\r\n    order: number;\r\n    addedDate: string;\r\n};\r\ntype GetTasksResponseType = {\r\n    items: TaskType[];\r\n    totalCount: number;\r\n    error: string;\r\n};\r\ntype TaskResponseType<D> = {\r\n    resultCode: number;\r\n    messages: string[];\r\n    data: D;\r\n};\r\nexport type UpdateTaskData = Pick<\r\n    TaskType,\r\n    \"description\" | \"title\" | \"completed\" | \"status\" | \"priority\" | \"startDate\" | \"deadline\"\r\n>;\r\n\r\ntype LoginResponseType = {\r\n    resultCode: number;\r\n    fieldsErrors: string[];\r\n    messages: string[];\r\n    data: {\r\n        userId: number;\r\n    };\r\n};\r\ntype LogoutResponseType = {\r\n    resultCode: number;\r\n    messages: string[];\r\n    data: {};\r\n};\r\ntype AuthMeResponseType = {\r\n    resultCode: number;\r\n    messages: string[];\r\n    data: {\r\n        id: number;\r\n        email: string;\r\n        login: string;\r\n    };\r\n};\r\nexport type AuthData = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe?: boolean;\r\n    captcha?: boolean;\r\n};\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        // \"API-KEY\": \"58a993db-1dec-4e5e-aeb2-a54bfae69c2c\",\r\n        \"API-KEY\": \"8074858c-0737-4322-ae35-ab3cabfe40b4\",\r\n    },\r\n});\r\n\r\nexport default class Api {\r\n    // Todolists\r\n    static async getTodolists() {\r\n        return await instance.get<TodolistType[]>(\"/todo-lists\");\r\n    }\r\n    static async createTodolist(title: string) {\r\n        return await instance.post<TodolistResponseType<{ item: TodolistType }>>(\"/todo-lists\", {\r\n            title,\r\n        });\r\n    }\r\n    static async deleteTodolist(todolistId: string) {\r\n        return await instance.delete<DeleteTodolistResponseType<{}>>(`/todo-lists/${todolistId}`);\r\n    }\r\n    static async updateTodolist(todolistId: string, title: string) {\r\n        return await instance.put<TodolistResponseType<{}>>(`/todo-lists/${todolistId}`, { title });\r\n    }\r\n\r\n    // Tasks\r\n    static async getTasks(todolistId: string) {\r\n        return await instance.get<GetTasksResponseType>(`/todo-lists/${todolistId}/tasks`);\r\n    }\r\n    static async createTask(todolistId: string, title: string) {\r\n        return await instance.post<TaskResponseType<{ item: TaskType }>>(\r\n            `/todo-lists/${todolistId}/tasks`,\r\n            { title }\r\n        );\r\n    }\r\n    static async updateTask(todolistId: string, taskId: string, updateData: UpdateTaskData) {\r\n        return await instance.put<TaskResponseType<{ item: TaskType }>>(\r\n            `/todo-lists/${todolistId}/tasks/${taskId}`,\r\n            updateData\r\n        );\r\n    }\r\n    static async deleteTask(todolistId: string, taskId: string) {\r\n        return await instance.delete<TaskResponseType<{}>>(\r\n            `/todo-lists/${todolistId}/tasks/${taskId}`\r\n        );\r\n    }\r\n\r\n    // Auth\r\n    static async login({ email, password, rememberMe, captcha }: AuthData) {\r\n        return await instance.post<LoginResponseType>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha: captcha ? captcha : false,\r\n        });\r\n    }\r\n    static async logout() {\r\n        return await instance.delete<LogoutResponseType>(`/auth/login`);\r\n    }\r\n    static async authMe() {\r\n        return await instance.get<AuthMeResponseType>(`/auth/me`);\r\n    }\r\n}\r\n","import { TextField } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport styles from \"./EditableSpan.module.scss\";\r\n\r\ninterface EditableSpanPropsType {\r\n    value: string;\r\n    changeItem: (newTitle: string, itemId: string) => void;\r\n    itemId: string;\r\n    disabled: boolean;\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo(function ({\r\n    value,\r\n    changeItem,\r\n    itemId,\r\n    disabled,\r\n}) {\r\n    const [valueInput, setValueInput] = useState<string>(value);\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const changeItemValue = () => {\r\n        setEditMode(false);\r\n        changeItem(valueInput, itemId);\r\n    };\r\n\r\n    const enableEditMode = () => {\r\n        if (!disabled) setEditMode(true);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            {editMode ? (\r\n                <TextField\r\n                    label=\"Write some...\"\r\n                    variant=\"outlined\"\r\n                    value={valueInput}\r\n                    onChange={(e) => setValueInput(e.currentTarget.value)}\r\n                    onBlur={changeItemValue}\r\n                    multiline\r\n                    inputProps={{ maxLength: 30 }}\r\n                    disabled={disabled}\r\n                    className={styles.textField}\r\n                    autoFocus\r\n                />\r\n            ) : (\r\n                <span onDoubleClick={enableEditMode}>{value}</span>\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n","import { Delete } from \"@mui/icons-material\";\r\nimport { Checkbox, IconButton } from \"@mui/material\";\r\n\r\nimport clsx from \"clsx\";\r\nimport React, { useCallback } from \"react\";\r\nimport { TaskStatus } from \"../../api/api\";\r\nimport { TaskStateType } from \"../../state/tasks/tasks-slice\";\r\n\r\nimport { EditableSpan } from \"../EditableSpan/EditableSpan\";\r\n\r\nimport styles from \"./Task.module.scss\";\r\n\r\ninterface TaskPropsType {\r\n    task: TaskStateType;\r\n    todolistId: string;\r\n    changeCheckStatus: (taskId: string, todolistId: string, status: TaskStatus) => void;\r\n    changeTaskTitle: (newTitle: string, taskId: string, todolistId: string) => void;\r\n    removeTask: (taskId: string, todolistId: string) => void;\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(function ({\r\n    task,\r\n    todolistId,\r\n    changeCheckStatus,\r\n    changeTaskTitle,\r\n    removeTask,\r\n}) {\r\n    const onChangeTitleTaskHandler = useCallback(\r\n        (newTitle: string, taskId: string) => {\r\n            changeTaskTitle(newTitle, taskId, todolistId);\r\n        },\r\n        [todolistId, changeTaskTitle]\r\n    );\r\n\r\n    const changeStatus = () => {\r\n        const status = task.status === TaskStatus.Completed ? TaskStatus.New : TaskStatus.Completed;\r\n        changeCheckStatus(task.id, todolistId, status);\r\n    };\r\n\r\n    return (\r\n        <li className={clsx(styles.task, task.status === TaskStatus.Completed && styles.is_done)}>\r\n            <Checkbox\r\n                checked={task.status === TaskStatus.Completed}\r\n                onChange={changeStatus}\r\n                disabled={task.entityStatus === \"loading\"}\r\n            />\r\n            <EditableSpan\r\n                value={task.title}\r\n                changeItem={onChangeTitleTaskHandler}\r\n                itemId={task.id}\r\n                disabled={task.entityStatus === \"loading\"}\r\n            />\r\n            <IconButton\r\n                aria-label=\"delete\"\r\n                onClick={() => removeTask(task.id, todolistId)}\r\n                className={clsx(styles.button, \"trash\")}\r\n                disabled={task.entityStatus === \"loading\"}\r\n            >\r\n                <Delete />\r\n            </IconButton>\r\n        </li>\r\n    );\r\n});\r\n","import { ActionCreatorsMapObject, bindActionCreators } from \"@reduxjs/toolkit\";\r\nimport { useMemo } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { AppDispatchType } from \"../state/store\";\r\n\r\nexport const useActions = <T extends ActionCreatorsMapObject>(actions: T) => {\r\n    const dispatch = useDispatch<AppDispatchType>();\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch);\r\n    }, [actions, dispatch]);\r\n\r\n    return boundActions;\r\n};\r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport Api, { AuthData } from \"../../api/api\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../utils/error-utils\";\r\nimport { setLoadingStatus } from \"../app/app-slice\";\r\n\r\nexport const loginTC = createAsyncThunk(\"auth/login\", async (authData: AuthData, thunkAPI) => {\r\n    thunkAPI.dispatch(setLoadingStatus({ status: \"loading\" }));\r\n    try {\r\n        const { data } = await Api.login(authData);\r\n        if (data.resultCode === 0) {\r\n            thunkAPI.dispatch(setLoadingStatus({ status: \"succeeded\" }));\r\n        } else {\r\n            handleServerAppError(data.messages, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue(null);\r\n    }\r\n});\r\n\r\nexport const logoutTC = createAsyncThunk(\"auth/logout\", async (_, thunkAPI) => {\r\n    thunkAPI.dispatch(setLoadingStatus({ status: \"loading\" }));\r\n    try {\r\n        const { data } = await Api.logout();\r\n        if (data.resultCode === 0) {\r\n            thunkAPI.dispatch(setLoadingStatus({ status: \"succeeded\" }));\r\n        } else {\r\n            handleServerAppError(data.messages, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue(null);\r\n    }\r\n});\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { loginTC, logoutTC } from \"./auth-actions\";\r\n\r\nexport const authSlice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        isLoggedIn: false,\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = true;\r\n        });\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = false;\r\n        });\r\n    },\r\n});\r\n\r\nexport const authReducer = authSlice.reducer;\r\nexport const { setIsLoggedIn } = authSlice.actions;\r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nimport Api from \"../../api/api\";\r\nimport { handleServerNetworkError } from \"../../utils/error-utils\";\r\nimport { setIsLoggedIn } from \"../auth/auth-slice\";\r\n\r\nexport const initializeAppTC = createAsyncThunk(\r\n    \"app/initializeApp\",\r\n    async (_, { dispatch, rejectWithValue }) => {\r\n        try {\r\n            const { data } = await Api.authMe();\r\n            if (data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({ value: true }));\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            return rejectWithValue(null);\r\n        }\r\n    }\r\n);\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { initializeAppTC } from \"./app-actions\";\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\nexport type AppStateType = {\r\n    loadingStatus: RequestStatusType;\r\n    error: string | null;\r\n    initialized: boolean;\r\n};\r\n\r\nexport const appSlice = createSlice({\r\n    name: \"app\",\r\n    initialState: {\r\n        loadingStatus: \"idle\",\r\n        error: null,\r\n        initialized: false,\r\n    } as AppStateType,\r\n    reducers: {\r\n        setLoadingStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.loadingStatus = action.payload.status;\r\n        },\r\n        setError(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error;\r\n        },\r\n    },\r\n    extraReducers: (build) => {\r\n        build.addCase(initializeAppTC.fulfilled, (state, action) => {\r\n            state.initialized = true;\r\n        });\r\n    },\r\n});\r\n\r\nexport const appReducer = appSlice.reducer;\r\nexport const { setLoadingStatus, setError } = appSlice.actions;\r\n","import { Dispatch } from \"redux\";\r\nimport { setError, setLoadingStatus } from \"../state/app/app-slice\";\r\n\r\nexport const handleServerAppError = (messages: string[], dispatch: Dispatch) => {\r\n    if (messages.length) {\r\n        dispatch(setError({ error: messages[0] }));\r\n    } else {\r\n        dispatch(setError({ error: \"Some error occurred\" }));\r\n    }\r\n    dispatch(setLoadingStatus({ status: \"failed\" }));\r\n};\r\n\r\nexport const handleServerNetworkError = (error: Error | unknown, dispatch: Dispatch) => {\r\n    if (error instanceof Error) {\r\n        dispatch(setError({ error: error.message }));\r\n        dispatch(setLoadingStatus({ status: \"failed\" }));\r\n    }\r\n};\r\n","import Api from \"../../api/api\";\r\nimport { setLoadingStatus } from \"../app/app-slice\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../utils/error-utils\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { changeTodolistEntityStatus } from \"./todolists-slice\";\r\nimport {fetchTasksTC} from \"../tasks/tasks-actions\";\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk(\r\n    \"todolists/fetchTodolists\",\r\n    async (_, { dispatch, rejectWithValue }) => {\r\n        try {\r\n            dispatch(setLoadingStatus({ status: \"loading\" }));\r\n            const { data } = await Api.getTodolists();\r\n            for (let i = 0; i < data.length; i++) {\r\n                console.log('wtf')\r\n                const todolistId = data[i].id\r\n                dispatch(fetchTasksTC(todolistId))\r\n            }\r\n            dispatch(setLoadingStatus({ status: \"succeeded\" }));\r\n\r\n            return { todolists: data };\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            return rejectWithValue(null);\r\n        }\r\n    }\r\n);\r\n\r\nexport const removeTodolistTC = createAsyncThunk(\r\n    \"todolists/removeTodolist\",\r\n    async (todolistId: string, { dispatch, rejectWithValue }) => {\r\n        try {\r\n            dispatch(setLoadingStatus({ status: \"loading\" }));\r\n            dispatch(changeTodolistEntityStatus({ todolistId, entityStatus: \"loading\" }));\r\n\r\n            const { data } = await Api.deleteTodolist(todolistId);\r\n            if (data.resultCode === 0) {\r\n                dispatch(setLoadingStatus({ status: \"succeeded\" }));\r\n                dispatch(changeTodolistEntityStatus({ todolistId, entityStatus: \"idle\" }));\r\n                return { todolistId };\r\n            } else {\r\n                handleServerAppError(data.messages, dispatch);\r\n                dispatch(changeTodolistEntityStatus({ todolistId, entityStatus: \"failed\" }));\r\n                return rejectWithValue(null);\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTodolistEntityStatus({ todolistId, entityStatus: \"failed\" }));\r\n            return rejectWithValue(null);\r\n        }\r\n    }\r\n);\r\n\r\nexport const addTodolistTC = createAsyncThunk(\r\n    \"todolists/addTodolist\",\r\n    async (title: string, { dispatch, rejectWithValue }) => {\r\n        try {\r\n            dispatch(setLoadingStatus({ status: \"loading\" }));\r\n\r\n            const { data } = await Api.createTodolist(title);\r\n            if (data.resultCode === 0) {\r\n                dispatch(setLoadingStatus({ status: \"succeeded\" }));\r\n                return { todolist: data.data.item };\r\n            } else {\r\n                handleServerAppError(data.messages, dispatch);\r\n                return rejectWithValue(null);\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            return rejectWithValue(null);\r\n        }\r\n    }\r\n);\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk(\r\n    \"todolists/changeTodolistTitle\",\r\n    async (\r\n        { todolistId, newTitle }: { todolistId: string; newTitle: string },\r\n        { dispatch, rejectWithValue }\r\n    ) => {\r\n        try {\r\n            dispatch(setLoadingStatus({ status: \"loading\" }));\r\n\r\n            const { data } = await Api.updateTodolist(todolistId, newTitle);\r\n            if (data.resultCode === 0) {\r\n                dispatch(setLoadingStatus({ status: \"succeeded\" }));\r\n                return { todolistId, newTitle };\r\n            } else {\r\n                handleServerAppError(data.messages, dispatch);\r\n                return rejectWithValue(null);\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            return rejectWithValue(null);\r\n        }\r\n    }\r\n);\r\n","import { TodolistType } from \"../../api/api\";\r\nimport { RequestStatusType } from \"../app/app-slice\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC,\r\n} from \"./todolists-actions\";\r\n\r\nexport type FilterType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistStateType = TodolistType & {\r\n    filter: FilterType;\r\n    entityStatus: RequestStatusType;\r\n};\r\n\r\nexport const todolistsSlice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: [] as TodolistStateType[],\r\n    reducers: {\r\n        changeTodolistFilter(\r\n            state,\r\n            action: PayloadAction<{ todolistId: string; filter: FilterType }>\r\n        ) {\r\n            const index = state.findIndex((td) => td.id === action.payload.todolistId);\r\n            if (index > -1) {\r\n                state[index].filter = action.payload.filter;\r\n            }\r\n        },\r\n        changeTodolistEntityStatus(\r\n            state,\r\n            action: PayloadAction<{ todolistId: string; entityStatus: RequestStatusType }>\r\n        ) {\r\n            const index = state.findIndex((td) => td.id === action.payload.todolistId);\r\n            if (index > -1) {\r\n                state[index].entityStatus = action.payload.entityStatus;\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map((td) => ({\r\n                ...td,\r\n                filter: \"all\",\r\n                entityStatus: \"idle\",\r\n            }));\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            return state.filter((td) => td.id !== action.payload.todolistId);\r\n        });\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({ ...action.payload.todolist, filter: \"all\", entityStatus: \"idle\" });\r\n        });\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex((td) => td.id === action.payload.todolistId);\r\n            if (index > -1) {\r\n                state[index].title = action.payload.newTitle;\r\n            }\r\n        });\r\n    },\r\n});\r\n\r\nexport const todolistsReducer = todolistsSlice.reducer;\r\nexport const { changeTodolistEntityStatus, changeTodolistFilter } = todolistsSlice.actions;\r\n","import { addTodolistTC, fetchTodolistsTC, removeTodolistTC } from \"../todolists/todolists-actions\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { TaskType, UpdateTaskData } from \"../../api/api\";\r\nimport { RequestStatusType } from \"../app/app-slice\";\r\nimport { fetchTasksTC, deleteTaskTC, addTaskTC, updateTaskTC } from \"./tasks-actions\";\r\n\r\nexport type TaskStateType = TaskType & { entityStatus: RequestStatusType };\r\nexport interface TasksType {\r\n    [todolistId: string]: TaskStateType[];\r\n}\r\nexport type UpdateTaskType = {\r\n    taskId: string;\r\n    todolistId: string;\r\n    updateData: Partial<UpdateTaskData>;\r\n};\r\n\r\nexport const tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {} as TasksType,\r\n    reducers: {\r\n        changeTaskEntityStatus(\r\n            state,\r\n            action: PayloadAction<{\r\n                todolistId: string;\r\n                taskId: string;\r\n                entityStatus: RequestStatusType;\r\n            }>\r\n        ) {\r\n            for (let task of state[action.payload.todolistId]) {\r\n                if (task.id === action.payload.taskId) {\r\n                    task.entityStatus = action.payload.entityStatus;\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        // todolists cases\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.todolistId];\r\n        });\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl) => {\r\n                if (!state[tl.id]) {\r\n                    state[tl.id] = [];\r\n                }\r\n            });\r\n        });\r\n\r\n        // thunks cases\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload!.todolistId] = action.payload!.tasks.map((t) => {\r\n                return { ...t, entityStatus: \"idle\" };\r\n            });\r\n        });\r\n        builder.addCase(deleteTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload!.todolistId];\r\n            const index = tasks.findIndex((task) => task.id === action.payload!.taskId);\r\n            tasks.splice(index, 1);\r\n        });\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            const taskState: TaskStateType = { ...action.payload!.task, entityStatus: \"idle\" };\r\n            state[action.payload!.todolistId].unshift(taskState);\r\n        });\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload!.todolistId];\r\n            const index = tasks.findIndex((t) => t.id === action.payload!.taskId);\r\n            tasks[index] = { ...tasks[index], ...action.payload!.updateData };\r\n        });\r\n    },\r\n});\r\n\r\nexport const tasksReducer = tasksSlice.reducer;\r\nexport const { changeTaskEntityStatus } = tasksSlice.actions;\r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport Api from \"../../api/api\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../utils/error-utils\";\r\nimport { setLoadingStatus } from \"../app/app-slice\";\r\nimport { AppRootStateType } from \"../store\";\r\nimport { changeTodolistEntityStatus } from \"../todolists/todolists-slice\";\r\nimport { changeTaskEntityStatus, UpdateTaskType } from \"./tasks-slice\";\r\n\r\nexport const fetchTasksTC = createAsyncThunk(\r\n    \"tasks/fetchTasks\",\r\n    async (todolistId: string, thunkAPI) => {\r\n        thunkAPI.dispatch(setLoadingStatus({ status: \"loading\" }));\r\n        try {\r\n            const {\r\n                data: { items: tasks },\r\n            } = await Api.getTasks(todolistId);\r\n            thunkAPI.dispatch(setLoadingStatus({ status: \"succeeded\" }));\r\n            return { todolistId, tasks };\r\n        } catch (error) {\r\n            handleServerNetworkError(error, thunkAPI.dispatch);\r\n        }\r\n    }\r\n);\r\n\r\nexport const deleteTaskTC = createAsyncThunk(\r\n    \"tasks/deleteTask\",\r\n    async ({ taskId, todolistId }: { taskId: string; todolistId: string }, thunkAPI) => {\r\n        thunkAPI.dispatch(setLoadingStatus({ status: \"loading\" }));\r\n        thunkAPI.dispatch(changeTaskEntityStatus({ todolistId, taskId, entityStatus: \"loading\" }));\r\n        try {\r\n            await Api.deleteTask(todolistId, taskId);\r\n            thunkAPI.dispatch(setLoadingStatus({ status: \"succeeded\" }));\r\n            thunkAPI.dispatch(changeTaskEntityStatus({ todolistId, taskId, entityStatus: \"idle\" }));\r\n            return { todolistId, taskId };\r\n        } catch (error) {\r\n            handleServerNetworkError(error, thunkAPI.dispatch);\r\n            thunkAPI.dispatch(\r\n                changeTaskEntityStatus({ todolistId, taskId, entityStatus: \"failed\" })\r\n            );\r\n        }\r\n    }\r\n);\r\n\r\nexport const addTaskTC = createAsyncThunk(\r\n    \"tasks/addTask\",\r\n    async (\r\n        { todolistId, title }: { todolistId: string; title: string },\r\n        { dispatch, rejectWithValue }\r\n    ) => {\r\n        dispatch(setLoadingStatus({ status: \"loading\" }));\r\n        dispatch(changeTodolistEntityStatus({ todolistId, entityStatus: \"loading\" }));\r\n        try {\r\n            const { data } = await Api.createTask(todolistId, title);\r\n            if (data.resultCode === 0) {\r\n                dispatch(setLoadingStatus({ status: \"succeeded\" }));\r\n                dispatch(changeTodolistEntityStatus({ todolistId, entityStatus: \"idle\" }));\r\n                return { todolistId, task: data.data.item };\r\n            } else {\r\n                handleServerAppError(data.messages, dispatch);\r\n                dispatch(changeTodolistEntityStatus({ todolistId, entityStatus: \"failed\" }));\r\n                return rejectWithValue(null);\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTodolistEntityStatus({ todolistId, entityStatus: \"failed\" }));\r\n            return rejectWithValue(null);\r\n        }\r\n    }\r\n);\r\n\r\nexport const updateTaskTC = createAsyncThunk(\r\n    \"tasks/updateTask\",\r\n    async (\r\n        { todolistId, taskId, updateData }: UpdateTaskType,\r\n        { dispatch, getState, rejectWithValue }\r\n    ) => {\r\n        try {\r\n            dispatch(setLoadingStatus({ status: \"loading\" }));\r\n            dispatch(changeTaskEntityStatus({ todolistId, taskId, entityStatus: \"loading\" }));\r\n\r\n            const state = getState() as AppRootStateType;\r\n            const tasksTodolist = state.tasks[todolistId];\r\n            const task = tasksTodolist.find((t) => t.id === taskId);\r\n\r\n            if (task) {\r\n                await Api.updateTask(todolistId, taskId, {\r\n                    title: task.title,\r\n                    startDate: task.startDate,\r\n                    priority: task.priority,\r\n                    description: task.description,\r\n                    deadline: task.deadline,\r\n                    completed: task.completed,\r\n                    status: task.status,\r\n                    ...updateData,\r\n                });\r\n\r\n                dispatch(setLoadingStatus({ status: \"succeeded\" }));\r\n                dispatch(changeTaskEntityStatus({ todolistId, taskId, entityStatus: \"idle\" }));\r\n                return { todolistId, taskId, updateData };\r\n            } else {\r\n                handleServerAppError([\"Не удалось обновить таску\"], dispatch);\r\n                return rejectWithValue(null);\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(changeTaskEntityStatus({ todolistId, taskId, entityStatus: \"failed\" }));\r\n            return rejectWithValue(null);\r\n        }\r\n    }\r\n);\r\n","import * as tasksSelectors from \"./tasks-selectors\";\r\nimport * as tasksAsyncActions from \"./tasks-actions\";\r\nimport { tasksSlice } from \"./tasks-slice\";\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions,\r\n};\r\n\r\nexport { tasksSelectors, tasksActions };\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport { Button, IconButton } from \"@mui/material\";\r\nimport styles from \"./Todolist.module.scss\";\r\n\r\nimport { AddItemForm } from \"../AddItemForm/AddItemForm\";\r\nimport { Task } from \"../Task/Task\";\r\nimport { FilterType } from \"../../state/todolists/todolists-slice\";\r\nimport { TaskStatus, UpdateTaskData } from \"../../api/api\";\r\nimport { EditableSpan } from \"../EditableSpan/EditableSpan\";\r\nimport { RequestStatusType } from \"../../state/app/app-slice\";\r\nimport { getTasksByTodolistId } from \"../../state/tasks/tasks-selectors\";\r\nimport { useActions } from \"../../hooks/useActions\";\r\nimport { tasksActions } from \"../../state/tasks\";\r\n\r\ninterface TodolistPropsType {\r\n    title: string;\r\n    filter: FilterType;\r\n    entityStatus: RequestStatusType;\r\n    todolistId: string;\r\n    changeFilter: (filter: FilterType, todolistId: string) => void;\r\n    removeTodolist: (todolistId: string) => void;\r\n    changeTodolistTitle: (newTitle: string, todolistId: string) => void;\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = React.memo(function ({\r\n    title,\r\n    filter,\r\n    entityStatus,\r\n    todolistId,\r\n    changeFilter,\r\n    removeTodolist,\r\n    changeTodolistTitle,\r\n}) {\r\n    const { deleteTaskTC, addTaskTC, updateTaskTC } = useActions(tasksActions);\r\n    const tasks = useSelector(getTasksByTodolistId(todolistId));\r\n\r\n    console.log(entityStatus)\r\n\r\n    const removeTask = useCallback(\r\n        (taskId: string, todolistId: string) => {\r\n            deleteTaskTC({ taskId, todolistId });\r\n        },\r\n        [deleteTaskTC]\r\n    );\r\n\r\n    const addTask = useCallback(\r\n        (title: string, todolistId: string) => {\r\n            addTaskTC({ todolistId, title });\r\n        },\r\n        [addTaskTC]\r\n    );\r\n\r\n    const changeCheckStatus = useCallback(\r\n        (taskId: string, todolistId: string, status: TaskStatus) => {\r\n            const updateData: Partial<UpdateTaskData> = { status };\r\n            updateTaskTC({ taskId, todolistId, updateData });\r\n        },\r\n        [updateTaskTC]\r\n    );\r\n\r\n    const changeTaskTitle = useCallback(\r\n        (newTitle: string, taskId: string, todolistId: string) => {\r\n            const updateData: Partial<UpdateTaskData> = { title: newTitle };\r\n            updateTaskTC({ taskId, todolistId, updateData });\r\n        },\r\n        [updateTaskTC]\r\n    );\r\n\r\n    const addItem = useCallback(\r\n        (title: string) => addTask(title, todolistId),\r\n        [todolistId, addTask]\r\n    );\r\n\r\n    let newTasks = tasks;\r\n    if (filter === \"active\") {\r\n        newTasks = newTasks.filter((task) => task.status === TaskStatus.New);\r\n    }\r\n    if (filter === \"completed\") {\r\n        newTasks = newTasks.filter((task) => task.status === TaskStatus.Completed);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.todolist}>\r\n            <div className={styles.todolist_title}>\r\n                <EditableSpan\r\n                    value={title}\r\n                    changeItem={changeTodolistTitle}\r\n                    itemId={todolistId}\r\n                    disabled={entityStatus === \"loading\"}\r\n                />\r\n                <IconButton\r\n                    aria-label=\"delete\"\r\n                    onClick={() => removeTodolist(todolistId)}\r\n                    className={clsx(styles.button, \"trash\")}\r\n                    disabled={entityStatus === \"loading\"}\r\n                >\r\n                    <Delete />\r\n                </IconButton>\r\n            </div>\r\n\r\n            <AddItemForm addItem={addItem} disabled={entityStatus === \"loading\"} />\r\n\r\n            <ul className={styles.tasks}>\r\n                {newTasks?.map((task) => (\r\n                    <Task\r\n                        key={task.id}\r\n                        task={task}\r\n                        todolistId={todolistId}\r\n                        changeCheckStatus={changeCheckStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        removeTask={removeTask}\r\n                    />\r\n                ))}\r\n            </ul>\r\n\r\n            <div>\r\n                <Button\r\n                    onClick={() => changeFilter(\"all\", todolistId)}\r\n                    variant={filter === \"all\" ? \"contained\" : \"text\"}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    onClick={() => changeFilter(\"active\", todolistId)}\r\n                    variant={filter === \"active\" ? \"contained\" : \"text\"}\r\n                    color=\"success\"\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    onClick={() => changeFilter(\"completed\", todolistId)}\r\n                    variant={filter === \"completed\" ? \"contained\" : \"text\"}\r\n                    color=\"secondary\"\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n","import { AppRootStateType } from \"../store\";\r\n\r\nexport const getTasksByTodolistId = (todolistId: string) => (state: AppRootStateType) => {\r\n    return state.tasks[todolistId];\r\n}\r\n\r\n","import { AppRootStateType } from \"../store\";\r\n\r\nexport const getAuthIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn;\r\n","import * as authSelectors from \"./auth-selectors\";\r\nimport * as authAsyncActions from \"./auth-actions\";\r\nimport { authSlice } from \"./auth-slice\";\r\n\r\nconst authActions = {\r\n    ...authAsyncActions,\r\n    // ...authSlice.actions,\r\n};\r\n\r\nexport { authSelectors, authActions };\r\n","import { AppRootStateType } from \"../store\";\r\n\r\nexport const getTodolists = (state: AppRootStateType) => state.todolists;\r\n","import * as todolistsSelectors from \"./todolists-selectors\";\r\nimport * as todolistsAsyncActions from \"./todolists-actions\";\r\nimport { todolistsSlice } from \"./todolists-slice\";\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions,\r\n};\r\n\r\nexport { todolistsSelectors, todolistsActions };\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nimport { Container, Grid, Paper } from \"@mui/material\";\r\n\r\nimport { AddItemForm } from \"../components/AddItemForm/AddItemForm\";\r\nimport { Todolist } from \"../components/Todolist/Todolist\";\r\nimport { FilterType } from \"../state/todolists/todolists-slice\";\r\nimport { authSelectors } from \"../state/auth\";\r\nimport { todolistsActions, todolistsSelectors } from \"../state/todolists\";\r\nimport { useActions } from \"../hooks/useActions\";\r\n\r\nexport const TodolistsListPage: React.FC = () => {\r\n  const {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC,\r\n    changeTodolistFilter,\r\n  } = useActions(todolistsActions);\r\n  const todolists = useSelector(todolistsSelectors.getTodolists);\r\n  const isLoggedIn = useSelector(authSelectors.getAuthIsLoggedIn);\r\n\r\n  useEffect(() => {\r\n    if (isLoggedIn) {\r\n      fetchTodolistsTC();\r\n    }\r\n  }, [isLoggedIn, fetchTodolistsTC]);\r\n\r\n  const changeFilter = useCallback(\r\n    (filter: FilterType, todolistId: string) => {\r\n      changeTodolistFilter({ todolistId, filter });\r\n    },\r\n    [changeTodolistFilter],\r\n  );\r\n\r\n  const removeTodolist = useCallback(\r\n    (todolistId: string) => {\r\n      removeTodolistTC(todolistId);\r\n    },\r\n    [removeTodolistTC],\r\n  );\r\n\r\n  const addTodolist = useCallback(\r\n    (title: string) => {\r\n      addTodolistTC(title);\r\n    },\r\n    [addTodolistTC],\r\n  );\r\n\r\n  const changeTodolistTitle = useCallback(\r\n    (newTitle: string, todolistId: string) => {\r\n      changeTodolistTitleTC({ todolistId, newTitle });\r\n    },\r\n    [changeTodolistTitleTC],\r\n  );\r\n\r\n  if (!isLoggedIn) {\r\n    return <Navigate to=\"/todolist-repeat/auth\" />;\r\n  }\r\n  return (\r\n    <>\r\n      <Container fixed>\r\n        <AddItemForm addItem={addTodolist} className=\"input-todolist\" />\r\n        <Grid container spacing={5}>\r\n          {todolists.map((td) => {\r\n            return (\r\n              <Grid item key={td.id}>\r\n                <Paper className=\"paper\">\r\n                  <Todolist\r\n                    title={td.title}\r\n                    filter={td.filter}\r\n                    entityStatus={td.entityStatus}\r\n                    todolistId={td.id}\r\n                    changeFilter={changeFilter}\r\n                    removeTodolist={removeTodolist}\r\n                    changeTodolistTitle={changeTodolistTitle}\r\n                  />\r\n                </Paper>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  Grid,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  TextField,\r\n  Button,\r\n} from \"@mui/material\";\r\n\r\nimport { authActions, authSelectors } from \"../state/auth\";\r\nimport { useActions } from \"../hooks/useActions\";\r\n\r\nexport const LoginPage: React.FC = () => {\r\n  const { loginTC } = useActions(authActions);\r\n  const isLoggedIn = useSelector(authSelectors.getAuthIsLoggedIn);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      checkbox: false,\r\n    },\r\n    validationSchema: Yup.object({\r\n      email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\r\n      password: Yup.string()\r\n        .min(2, \"Password must be more 2 characters\")\r\n        .required(\"Required\"),\r\n      checkbox: Yup.boolean(),\r\n    }),\r\n    onSubmit: (values) => {\r\n      loginTC(values);\r\n      formik.resetForm();\r\n    },\r\n  });\r\n\r\n  const submitForm = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    formik.handleSubmit();\r\n  };\r\n\r\n  if (isLoggedIn) {\r\n    return <Navigate to=\"/todolist-repeat/\" />;\r\n  }\r\n  return (\r\n    <Grid container justifyContent={\"center\"}>\r\n      <Grid item justifyContent={\"center\"}>\r\n        <form onSubmit={submitForm}>\r\n          <FormControl>\r\n            <FormLabel>\r\n              <p>\r\n                To log in get registered\r\n                <a\r\n                  href={\"https://social-network.samuraijs.com/\"}\r\n                  target={\"_blank\"}\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  {\" \"}\r\n                  here\r\n                </a>\r\n              </p>\r\n              <p>or use common test account credentials:</p>\r\n              <p>Email: free@samuraijs.com</p>\r\n              <p>Password: free</p>\r\n            </FormLabel>\r\n            <FormGroup>\r\n              <TextField\r\n                id=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"email\")}\r\n                error={!!(formik.touched.email && formik.errors.email)}\r\n              />\r\n              {formik.touched.email && formik.errors.email ? (\r\n                <div style={{ color: \"rgb(211, 47, 47)\" }}>\r\n                  {formik.errors.email}\r\n                </div>\r\n              ) : null}\r\n\r\n              <TextField\r\n                id=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"password\")}\r\n                error={!!(formik.touched.password && formik.errors.password)}\r\n              />\r\n              {formik.touched.password && formik.errors.password ? (\r\n                <div style={{ color: \"rgb(211, 47, 47)\" }}>\r\n                  {formik.errors.password}\r\n                </div>\r\n              ) : null}\r\n\r\n              <FormControlLabel\r\n                id=\"checkbox\"\r\n                label={\"Remember me\"}\r\n                control={<Checkbox />}\r\n              />\r\n              <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { AppRootStateType } from \"../store\";\r\n\r\nexport const getAppInitialized = (state: AppRootStateType) => state.app.initialized;\r\nexport const getAppError = (state: AppRootStateType) => state.app.error;\r\nexport const getAppLoadingStatus = (state: AppRootStateType) => state.app.loadingStatus;\r\n","import * as appSelectors from \"./app-selectors\";\r\nimport * as appAsyncActions from \"./app-actions\";\r\nimport { appSlice } from \"./app-slice\";\r\n\r\nconst appActions = {\r\n    ...appAsyncActions,\r\n    setError: appSlice.actions.setError,\r\n};\r\n\r\nexport { appSelectors, appActions };\r\n","import React from \"react\";\r\nimport { Snackbar } from \"@mui/material\";\r\nimport MuiAlert, { AlertProps } from \"@mui/material/Alert\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { getAppError } from \"../../state/app/app-selectors\";\r\nimport { useActions } from \"../../hooks/useActions\";\r\nimport { appActions } from \"../../state/app\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbar: React.FC = React.memo(() => {\r\n    const { setError } = useActions(appActions);\r\n    const error = useSelector(getAppError);\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === \"clickaway\") return;\r\n        setError({ error: null });\r\n    };\r\n\r\n    return (\r\n        <Snackbar\r\n            open={error !== null}\r\n            autoHideDuration={3000}\r\n            onClose={handleClose}\r\n            anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n        >\r\n            <Alert severity=\"error\" onClose={handleClose}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n});\r\n","import React from \"react\";\r\nimport { Outlet } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { AppBar, Toolbar, Typography, Button, Box, LinearProgress } from \"@mui/material\";\r\n\r\nimport { ErrorSnackbar } from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport { getAppLoadingStatus } from \"../state/app/app-selectors\";\r\nimport { getAuthIsLoggedIn } from \"../state/auth/auth-selectors\";\r\nimport { useActions } from \"../hooks/useActions\";\r\nimport { authActions } from \"../state/auth\";\r\n\r\nexport const HeaderLayout: React.FC = () => {\r\n    const { logoutTC } = useActions(authActions);\r\n    const status = useSelector(getAppLoadingStatus);\r\n    const isLoggedIn = useSelector(getAuthIsLoggedIn);\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        Todo App\r\n                    </Typography>\r\n                    {isLoggedIn && (\r\n                        <Button color=\"inherit\" onClick={() => logoutTC()}>\r\n                            Log out\r\n                        </Button>\r\n                    )}\r\n                </Toolbar>\r\n                {status === \"loading\" && (\r\n                    <Box sx={{ width: \"100%\" }} className={\"linear-progress\"}>\r\n                        <LinearProgress color=\"inherit\" />\r\n                    </Box>\r\n                )}\r\n            </AppBar>\r\n            <ErrorSnackbar />\r\n\r\n            <Outlet />\r\n        </>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\n\r\nimport { Box, CircularProgress } from \"@mui/material\";\r\nimport \"./App.scss\";\r\n\r\nimport { TodolistsListPage } from \"../pages/TodolistsListPage\";\r\nimport { LoginPage } from \"../pages/LoginPage\";\r\nimport { HeaderLayout } from \"../layouts/HeaderLayout\";\r\nimport { getAppInitialized } from \"../state/app/app-selectors\";\r\nimport { useActions } from \"../hooks/useActions\";\r\nimport { appActions } from \"../state/app\";\r\n\r\nconst App: React.FC = () => {\r\n  const { initializeAppTC } = useActions(appActions);\r\n  const isInitialized = useSelector(getAppInitialized);\r\n\r\n  useEffect(() => {\r\n    initializeAppTC();\r\n  }, [initializeAppTC]);\r\n\r\n  if (!isInitialized) {\r\n    return (\r\n      <Box sx={{ display: \"flex\" }} className={\"circularProgress\"}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <Routes>\r\n        <Route path=\"/todolist-repeat/\" element={<HeaderLayout />}>\r\n          <Route index element={<TodolistsListPage />} />\r\n          <Route path=\"auth\" element={<LoginPage />} />\r\n          <Route path=\"*\" element={<h1>404: PAGE NOT FOUND</h1>} />\r\n        </Route>\r\n      </Routes>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { tasksReducer } from \"./tasks/tasks-slice\";\r\nimport { todolistsReducer } from \"./todolists/todolists-slice\";\r\nimport { combineReducers } from \"redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport { appReducer } from \"./app/app-slice\";\r\nimport { authReducer } from \"./auth/auth-slice\";\r\n\r\nexport type RootReducerType = typeof rootReducer;\r\nexport type AppRootStateType = ReturnType<RootReducerType>;\r\nexport type AppDispatchType = typeof store.dispatch;\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n});\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./app/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./state/store\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist_title\":\"Todolist_todolist_title__3Dqqd\",\"button\":\"Todolist_button__2Op2U\",\"todolist\":\"Todolist_todolist__2WIdX\",\"tasks\":\"Todolist_tasks__3NOlq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__29kGR\",\"is_done\":\"Task_is_done__2kiB5\"};"],"sourceRoot":""}